package com.example.mriogalvojnior.tap4personal.gen.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.example.mriogalvojnior.tap4personal.gen.Histotico;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTOTICO".
*/
public class HistoticoDao extends AbstractDao<Histotico, Long> {

    public static final String TABLENAME = "HISTOTICO";

    /**
     * Properties of entity Histotico.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Data = new Property(1, String.class, "data", false, "DATA");
        public final static Property Peso = new Property(2, String.class, "peso", false, "PESO");
        public final static Property Altura = new Property(3, String.class, "altura", false, "ALTURA");
        public final static Property Bf = new Property(4, String.class, "bf", false, "BF");
        public final static Property Bracodireito = new Property(5, String.class, "bracodireito", false, "BRACODIREITO");
        public final static Property Bracoesquerdo = new Property(6, String.class, "bracoesquerdo", false, "BRACOESQUERDO");
        public final static Property Coxadireita = new Property(7, String.class, "coxadireita", false, "COXADIREITA");
        public final static Property Coxaesquerda = new Property(8, String.class, "coxaesquerda", false, "COXAESQUERDA");
        public final static Property Pantdireita = new Property(9, String.class, "pantdireita", false, "PANTDIREITA");
        public final static Property Pantesquerda = new Property(10, String.class, "pantesquerda", false, "PANTESQUERDA");
        public final static Property Torax = new Property(11, String.class, "torax", false, "TORAX");
        public final static Property Abdomen = new Property(12, String.class, "abdomen", false, "ABDOMEN");
        public final static Property Cintura = new Property(13, String.class, "cintura", false, "CINTURA");
        public final static Property Quadril = new Property(14, String.class, "quadril", false, "QUADRIL");
        public final static Property Antebracodireito = new Property(15, String.class, "antebracodireito", false, "ANTEBRACODIREITO");
        public final static Property Antebracoesquerdo = new Property(16, String.class, "antebracoesquerdo", false, "ANTEBRACOESQUERDO");
        public final static Property Subescapular = new Property(17, String.class, "subescapular", false, "SUBESCAPULAR");
        public final static Property Tricipital = new Property(18, String.class, "tricipital", false, "TRICIPITAL");
        public final static Property Peitoral = new Property(19, String.class, "peitoral", false, "PEITORAL");
        public final static Property Axilarmedio = new Property(20, String.class, "axilarmedio", false, "AXILARMEDIO");
        public final static Property Suprailiaca = new Property(21, String.class, "suprailiaca", false, "SUPRAILIACA");
        public final static Property Abdominal = new Property(22, String.class, "abdominal", false, "ABDOMINAL");
        public final static Property Coxa = new Property(23, String.class, "coxa", false, "COXA");
        public final static Property AlunoID = new Property(24, long.class, "alunoID", false, "ALUNO_ID");
    };

    private Query<Histotico> aluno_HistoricoAlunosQuery;

    public HistoticoDao(DaoConfig config) {
        super(config);
    }
    
    public HistoticoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTOTICO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATA\" TEXT," + // 1: data
                "\"PESO\" TEXT," + // 2: peso
                "\"ALTURA\" TEXT," + // 3: altura
                "\"BF\" TEXT," + // 4: bf
                "\"BRACODIREITO\" TEXT," + // 5: bracodireito
                "\"BRACOESQUERDO\" TEXT," + // 6: bracoesquerdo
                "\"COXADIREITA\" TEXT," + // 7: coxadireita
                "\"COXAESQUERDA\" TEXT," + // 8: coxaesquerda
                "\"PANTDIREITA\" TEXT," + // 9: pantdireita
                "\"PANTESQUERDA\" TEXT," + // 10: pantesquerda
                "\"TORAX\" TEXT," + // 11: torax
                "\"ABDOMEN\" TEXT," + // 12: abdomen
                "\"CINTURA\" TEXT," + // 13: cintura
                "\"QUADRIL\" TEXT," + // 14: quadril
                "\"ANTEBRACODIREITO\" TEXT," + // 15: antebracodireito
                "\"ANTEBRACOESQUERDO\" TEXT," + // 16: antebracoesquerdo
                "\"SUBESCAPULAR\" TEXT," + // 17: subescapular
                "\"TRICIPITAL\" TEXT," + // 18: tricipital
                "\"PEITORAL\" TEXT," + // 19: peitoral
                "\"AXILARMEDIO\" TEXT," + // 20: axilarmedio
                "\"SUPRAILIACA\" TEXT," + // 21: suprailiaca
                "\"ABDOMINAL\" TEXT," + // 22: abdominal
                "\"COXA\" TEXT," + // 23: coxa
                "\"ALUNO_ID\" INTEGER NOT NULL );"); // 24: alunoID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTOTICO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Histotico entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(2, data);
        }
 
        String peso = entity.getPeso();
        if (peso != null) {
            stmt.bindString(3, peso);
        }
 
        String altura = entity.getAltura();
        if (altura != null) {
            stmt.bindString(4, altura);
        }
 
        String bf = entity.getBf();
        if (bf != null) {
            stmt.bindString(5, bf);
        }
 
        String bracodireito = entity.getBracodireito();
        if (bracodireito != null) {
            stmt.bindString(6, bracodireito);
        }
 
        String bracoesquerdo = entity.getBracoesquerdo();
        if (bracoesquerdo != null) {
            stmt.bindString(7, bracoesquerdo);
        }
 
        String coxadireita = entity.getCoxadireita();
        if (coxadireita != null) {
            stmt.bindString(8, coxadireita);
        }
 
        String coxaesquerda = entity.getCoxaesquerda();
        if (coxaesquerda != null) {
            stmt.bindString(9, coxaesquerda);
        }
 
        String pantdireita = entity.getPantdireita();
        if (pantdireita != null) {
            stmt.bindString(10, pantdireita);
        }
 
        String pantesquerda = entity.getPantesquerda();
        if (pantesquerda != null) {
            stmt.bindString(11, pantesquerda);
        }
 
        String torax = entity.getTorax();
        if (torax != null) {
            stmt.bindString(12, torax);
        }
 
        String abdomen = entity.getAbdomen();
        if (abdomen != null) {
            stmt.bindString(13, abdomen);
        }
 
        String cintura = entity.getCintura();
        if (cintura != null) {
            stmt.bindString(14, cintura);
        }
 
        String quadril = entity.getQuadril();
        if (quadril != null) {
            stmt.bindString(15, quadril);
        }
 
        String antebracodireito = entity.getAntebracodireito();
        if (antebracodireito != null) {
            stmt.bindString(16, antebracodireito);
        }
 
        String antebracoesquerdo = entity.getAntebracoesquerdo();
        if (antebracoesquerdo != null) {
            stmt.bindString(17, antebracoesquerdo);
        }
 
        String subescapular = entity.getSubescapular();
        if (subescapular != null) {
            stmt.bindString(18, subescapular);
        }
 
        String tricipital = entity.getTricipital();
        if (tricipital != null) {
            stmt.bindString(19, tricipital);
        }
 
        String peitoral = entity.getPeitoral();
        if (peitoral != null) {
            stmt.bindString(20, peitoral);
        }
 
        String axilarmedio = entity.getAxilarmedio();
        if (axilarmedio != null) {
            stmt.bindString(21, axilarmedio);
        }
 
        String suprailiaca = entity.getSuprailiaca();
        if (suprailiaca != null) {
            stmt.bindString(22, suprailiaca);
        }
 
        String abdominal = entity.getAbdominal();
        if (abdominal != null) {
            stmt.bindString(23, abdominal);
        }
 
        String coxa = entity.getCoxa();
        if (coxa != null) {
            stmt.bindString(24, coxa);
        }
        stmt.bindLong(25, entity.getAlunoID());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Histotico readEntity(Cursor cursor, int offset) {
        Histotico entity = new Histotico( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // data
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // peso
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // altura
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bf
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bracodireito
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bracoesquerdo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // coxadireita
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // coxaesquerda
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pantdireita
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pantesquerda
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // torax
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // abdomen
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // cintura
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // quadril
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // antebracodireito
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // antebracoesquerdo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // subescapular
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // tricipital
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // peitoral
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // axilarmedio
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // suprailiaca
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // abdominal
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // coxa
            cursor.getLong(offset + 24) // alunoID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Histotico entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setData(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPeso(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAltura(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBf(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBracodireito(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBracoesquerdo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCoxadireita(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCoxaesquerda(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPantdireita(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPantesquerda(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTorax(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAbdomen(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCintura(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setQuadril(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAntebracodireito(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAntebracoesquerdo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSubescapular(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTricipital(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPeitoral(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAxilarmedio(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setSuprailiaca(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAbdominal(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCoxa(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setAlunoID(cursor.getLong(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Histotico entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Histotico entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "historicoAlunos" to-many relationship of Aluno. */
    public List<Histotico> _queryAluno_HistoricoAlunos(long alunoID) {
        synchronized (this) {
            if (aluno_HistoricoAlunosQuery == null) {
                QueryBuilder<Histotico> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AlunoID.eq(null));
                aluno_HistoricoAlunosQuery = queryBuilder.build();
            }
        }
        Query<Histotico> query = aluno_HistoricoAlunosQuery.forCurrentThread();
        query.setParameter(0, alunoID);
        return query.list();
    }

}
