package com.example.mriogalvojnior.tap4personal.gen.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.example.mriogalvojnior.tap4personal.gen.Patologia;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATOLOGIA".
*/
public class PatologiaDao extends AbstractDao<Patologia, Long> {

    public static final String TABLENAME = "PATOLOGIA";

    /**
     * Properties of entity Patologia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nome = new Property(1, String.class, "nome", false, "NOME");
        public final static Property AlunoID = new Property(2, long.class, "alunoID", false, "ALUNO_ID");
    };

    private Query<Patologia> aluno_PatologiasAlunosQuery;

    public PatologiaDao(DaoConfig config) {
        super(config);
    }
    
    public PatologiaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATOLOGIA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOME\" TEXT," + // 1: nome
                "\"ALUNO_ID\" INTEGER NOT NULL );"); // 2: alunoID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATOLOGIA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Patologia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(2, nome);
        }
        stmt.bindLong(3, entity.getAlunoID());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Patologia readEntity(Cursor cursor, int offset) {
        Patologia entity = new Patologia( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nome
            cursor.getLong(offset + 2) // alunoID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Patologia entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNome(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlunoID(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Patologia entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Patologia entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "patologiasAlunos" to-many relationship of Aluno. */
    public List<Patologia> _queryAluno_PatologiasAlunos(long alunoID) {
        synchronized (this) {
            if (aluno_PatologiasAlunosQuery == null) {
                QueryBuilder<Patologia> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AlunoID.eq(null));
                aluno_PatologiasAlunosQuery = queryBuilder.build();
            }
        }
        Query<Patologia> query = aluno_PatologiasAlunosQuery.forCurrentThread();
        query.setParameter(0, alunoID);
        return query.list();
    }

}
