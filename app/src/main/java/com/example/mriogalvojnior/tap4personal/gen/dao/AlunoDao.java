package com.example.mriogalvojnior.tap4personal.gen.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.mriogalvojnior.tap4personal.gen.Aluno;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALUNO".
*/
public class AlunoDao extends AbstractDao<Aluno, Long> {

    public static final String TABLENAME = "ALUNO";

    /**
     * Properties of entity Aluno.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nome = new Property(1, String.class, "nome", false, "NOME");
        public final static Property Idade = new Property(2, String.class, "idade", false, "IDADE");
        public final static Property Sexo = new Property(3, String.class, "sexo", false, "SEXO");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property Telefone = new Property(5, String.class, "telefone", false, "TELEFONE");
        public final static Property Objetivo = new Property(6, String.class, "objetivo", false, "OBJETIVO");
        public final static Property Preco = new Property(7, String.class, "preco", false, "PRECO");
        public final static Property Data = new Property(8, String.class, "data", false, "DATA");
        public final static Property Daysforweek = new Property(9, String.class, "daysforweek", false, "DAYSFORWEEK");
        public final static Property Hour = new Property(10, String.class, "hour", false, "HOUR");
    };

    private DaoSession daoSession;


    public AlunoDao(DaoConfig config) {
        super(config);
    }
    
    public AlunoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALUNO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOME\" TEXT," + // 1: nome
                "\"IDADE\" TEXT," + // 2: idade
                "\"SEXO\" TEXT," + // 3: sexo
                "\"EMAIL\" TEXT," + // 4: email
                "\"TELEFONE\" TEXT," + // 5: telefone
                "\"OBJETIVO\" TEXT," + // 6: objetivo
                "\"PRECO\" TEXT," + // 7: preco
                "\"DATA\" TEXT," + // 8: data
                "\"DAYSFORWEEK\" TEXT," + // 9: daysforweek
                "\"HOUR\" TEXT);"); // 10: hour
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALUNO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Aluno entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(2, nome);
        }
 
        String idade = entity.getIdade();
        if (idade != null) {
            stmt.bindString(3, idade);
        }
 
        String sexo = entity.getSexo();
        if (sexo != null) {
            stmt.bindString(4, sexo);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String telefone = entity.getTelefone();
        if (telefone != null) {
            stmt.bindString(6, telefone);
        }
 
        String objetivo = entity.getObjetivo();
        if (objetivo != null) {
            stmt.bindString(7, objetivo);
        }
 
        String preco = entity.getPreco();
        if (preco != null) {
            stmt.bindString(8, preco);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(9, data);
        }
 
        String daysforweek = entity.getDaysforweek();
        if (daysforweek != null) {
            stmt.bindString(10, daysforweek);
        }
 
        String hour = entity.getHour();
        if (hour != null) {
            stmt.bindString(11, hour);
        }
    }

    @Override
    protected void attachEntity(Aluno entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Aluno readEntity(Cursor cursor, int offset) {
        Aluno entity = new Aluno( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nome
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idade
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sexo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // telefone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // objetivo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // preco
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // data
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // daysforweek
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // hour
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Aluno entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNome(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdade(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSexo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTelefone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setObjetivo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPreco(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setData(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDaysforweek(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHour(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Aluno entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Aluno entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
