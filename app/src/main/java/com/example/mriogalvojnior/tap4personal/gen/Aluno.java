package com.example.mriogalvojnior.tap4personal.gen;

import java.util.List;
import com.example.mriogalvojnior.tap4personal.gen.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.example.mriogalvojnior.tap4personal.gen.dao.AlunoDao;
import com.example.mriogalvojnior.tap4personal.gen.dao.DivisaoTreinoDao;
import com.example.mriogalvojnior.tap4personal.gen.dao.HistoticoDao;
import com.example.mriogalvojnior.tap4personal.gen.dao.PatologiaDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ALUNO".
 */
public class Aluno {

    private Long id;
    private String nome;
    private String idade;
    private String sexo;
    private String email;
    private String telefone;
    private String objetivo;
    private String preco;
    private String data;
    private String daysforweek;
    private String hour;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AlunoDao myDao;

    private List<DivisaoTreino> divisaoTreinoAlunos;
    private List<Histotico> historicoAlunos;
    private List<Patologia> patologiasAlunos;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Aluno() {
    }

    public Aluno(Long id) {
        this.id = id;
    }

    public Aluno(Long id, String nome, String idade, String sexo, String email, String telefone, String objetivo, String preco, String data, String daysforweek, String hour) {
        this.id = id;
        this.nome = nome;
        this.idade = idade;
        this.sexo = sexo;
        this.email = email;
        this.telefone = telefone;
        this.objetivo = objetivo;
        this.preco = preco;
        this.data = data;
        this.daysforweek = daysforweek;
        this.hour = hour;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAlunoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getIdade() {
        return idade;
    }

    public void setIdade(String idade) {
        this.idade = idade;
    }

    public String getSexo() {
        return sexo;
    }

    public void setSexo(String sexo) {
        this.sexo = sexo;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getTelefone() {
        return telefone;
    }

    public void setTelefone(String telefone) {
        this.telefone = telefone;
    }

    public String getObjetivo() {
        return objetivo;
    }

    public void setObjetivo(String objetivo) {
        this.objetivo = objetivo;
    }

    public String getPreco() {
        return preco;
    }

    public void setPreco(String preco) {
        this.preco = preco;
    }

    public String getData() {
        return data;
    }

    public void setData(String data) {
        this.data = data;
    }

    public String getDaysforweek() {
        return daysforweek;
    }

    public void setDaysforweek(String daysforweek) {
        this.daysforweek = daysforweek;
    }

    public String getHour() {
        return hour;
    }

    public void setHour(String hour) {
        this.hour = hour;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DivisaoTreino> getDivisaoTreinoAlunos() {
        if (divisaoTreinoAlunos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DivisaoTreinoDao targetDao = daoSession.getDivisaoTreinoDao();
            List<DivisaoTreino> divisaoTreinoAlunosNew = targetDao._queryAluno_DivisaoTreinoAlunos(id);
            synchronized (this) {
                if(divisaoTreinoAlunos == null) {
                    divisaoTreinoAlunos = divisaoTreinoAlunosNew;
                }
            }
        }
        return divisaoTreinoAlunos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDivisaoTreinoAlunos() {
        divisaoTreinoAlunos = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Histotico> getHistoricoAlunos() {
        if (historicoAlunos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HistoticoDao targetDao = daoSession.getHistoticoDao();
            List<Histotico> historicoAlunosNew = targetDao._queryAluno_HistoricoAlunos(id);
            synchronized (this) {
                if(historicoAlunos == null) {
                    historicoAlunos = historicoAlunosNew;
                }
            }
        }
        return historicoAlunos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetHistoricoAlunos() {
        historicoAlunos = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Patologia> getPatologiasAlunos() {
        if (patologiasAlunos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PatologiaDao targetDao = daoSession.getPatologiaDao();
            List<Patologia> patologiasAlunosNew = targetDao._queryAluno_PatologiasAlunos(id);
            synchronized (this) {
                if(patologiasAlunos == null) {
                    patologiasAlunos = patologiasAlunosNew;
                }
            }
        }
        return patologiasAlunos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPatologiasAlunos() {
        patologiasAlunos = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
