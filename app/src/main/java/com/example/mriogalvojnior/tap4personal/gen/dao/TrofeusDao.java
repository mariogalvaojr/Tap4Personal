package com.example.mriogalvojnior.tap4personal.gen.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.example.mriogalvojnior.tap4personal.gen.Trofeus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TROFEUS".
*/
public class TrofeusDao extends AbstractDao<Trofeus, Long> {

    public static final String TABLENAME = "TROFEUS";

    /**
     * Properties of entity Trofeus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Colocacao = new Property(1, String.class, "colocacao", false, "COLOCACAO");
        public final static Property Campeonato = new Property(2, String.class, "campeonato", false, "CAMPEONATO");
        public final static Property Ano = new Property(3, String.class, "ano", false, "ANO");
        public final static Property AtletaID = new Property(4, long.class, "atletaID", false, "ATLETA_ID");
    };

    private Query<Trofeus> atleta_TrofeusAtletaQuery;

    public TrofeusDao(DaoConfig config) {
        super(config);
    }
    
    public TrofeusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TROFEUS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COLOCACAO\" TEXT," + // 1: colocacao
                "\"CAMPEONATO\" TEXT," + // 2: campeonato
                "\"ANO\" TEXT," + // 3: ano
                "\"ATLETA_ID\" INTEGER NOT NULL );"); // 4: atletaID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TROFEUS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Trofeus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String colocacao = entity.getColocacao();
        if (colocacao != null) {
            stmt.bindString(2, colocacao);
        }
 
        String campeonato = entity.getCampeonato();
        if (campeonato != null) {
            stmt.bindString(3, campeonato);
        }
 
        String ano = entity.getAno();
        if (ano != null) {
            stmt.bindString(4, ano);
        }
        stmt.bindLong(5, entity.getAtletaID());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Trofeus readEntity(Cursor cursor, int offset) {
        Trofeus entity = new Trofeus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // colocacao
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // campeonato
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ano
            cursor.getLong(offset + 4) // atletaID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Trofeus entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setColocacao(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCampeonato(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAno(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAtletaID(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Trofeus entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Trofeus entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "trofeusAtleta" to-many relationship of Atleta. */
    public List<Trofeus> _queryAtleta_TrofeusAtleta(long atletaID) {
        synchronized (this) {
            if (atleta_TrofeusAtletaQuery == null) {
                QueryBuilder<Trofeus> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AtletaID.eq(null));
                atleta_TrofeusAtletaQuery = queryBuilder.build();
            }
        }
        Query<Trofeus> query = atleta_TrofeusAtletaQuery.forCurrentThread();
        query.setParameter(0, atletaID);
        return query.list();
    }

}
